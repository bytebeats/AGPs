apply plugin: 'maven-publish'
apply plugin: 'signing'

//only build and setting gradle can use `plugins`
//plugins {
//    id('signing')
//    id('maven-publish')
//}

task javadocJar(type: Jar) {
    from javadoc
    classifier('javadoc')
}


task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier('sources')
}

java {
    withJavadocJar()
    withSourcesJar()
}

apply from: '../local.gradle'

project.publishing {
    publications {
        inlinerPublication(MavenPublication) {
            // The coordinates of the library, being set from variables that
            // we'll set up in a moment
            groupId GROUP_ID
            artifactId TINIFY_ARTIFACT_ID
            version TINIFY_VERSION

            from components.java

            artifacts {
                archives(javadocJar, sourcesJar)
            }

            // Self-explanatory metadata for the most part
            pom {
                name = TINIFY_ARTIFACT_ID
                description = TINIFY_POM_DESCRIPTION
                // If your project has a dedicated site, use its URL here
                url = POM_URL
                licenses {
                    license {
                        //协议类型，一般默认Apache License2.0的话不用改：
                        name = LICENSE_NAME
                        url = LICENSE_URL
                    }
                }
                developers {
                    developer {
                        id = DEVELOPER_ID
                        name = DEVELOPER_NAME
                        email = DEVELOPER_EMAIL
                    }
                }
                // Version control info, if you're using GitHub, follow the format as seen here
                scm {
                    //修改成你的Git地址：
                    connection = SCM_CONNECTION
                    developerConnection = SCM_DEVELOPER_CONNECTION
                    //分支地址：
                    url = SCM_URL
                }
                // A slightly hacky fix so that your POM will include any transitive dependencies
                // that your library builds upon
//                withXml {
//                    def dependenciesNode = asNode().appendNode('dependencies')
//
//                    project.configurations.implementation.allDependencies.each {
//                        def dependencyNode = dependenciesNode.appendNode('dependency')
//                        dependencyNode.appendNode('groupId', it.group)
//                        dependencyNode.appendNode('artifactId', it.name)
//                        dependencyNode.appendNode('version', it.version)
//                    }
//                }
            }
        }
    }
    repositories {
        // The repository to publish to, Sonatype/MavenCentral
        maven {
            // This is an arbitrary name, you may also use "mavencentral" or
            // any other name that's descriptive for you
            name = "agp-tinify"

            // You only need this if you want to publish snapshots, otherwise just set the URL
            // to the release repo directly
            url = version.endsWith('SNAPSHOT') ? SNAPSHOTS_REPO_URL : RELEASES_REPO_URL

            // The username and password we've fetched earlier
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}
signing {
    sign publishing.publications
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}